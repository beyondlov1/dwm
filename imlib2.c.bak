#include <Imlib2.h>

// 废弃
static void drawpreview(const Arg *arg);
// 废弃
static void drawpreviewwin( Window win, int ww, int wh, int curtagindex);
static void updatepreview(void);
static void updatepreviewc(Client *c, int i);

static Imlib_Image tagimages[LENGTH(tags)];

void 
updatepreview(){
	unsigned int currtags = selmon->tagset[selmon->seltags];
	if (currtags & TAGMASK)
	{
		int i;
		int cnt = 0;
		int k = -1;
		for (i = 0; i < LENGTH(tags); i++)
		{
			if(currtags & (1 << i)){
				cnt += 1;
				k = i;
			}
		}
		if(cnt == 1)
		{
			Imlib_Image image;
			imlib_context_set_drawable(root);
			// imlib_context_set_drawable(selmon->sel->win);
			image = imlib_create_image_from_drawable((Pixmap)0, 0, 0,selmon->ww,selmon->wh, 1);
			// image = imlib_create_image_from_drawable((Pixmap)0, 0, 0,selmon->sel->w, selmon->sel->h, 1);
			if(tagimages[k]){
				imlib_context_set_image(tagimages[k]);
				imlib_free_image();
			}
			if(image){
				LOG_FORMAT("updatepreview:, k:%d",k);
				tagimages[k] = image;
			}else{
			    tagimages[k] = NULL;	
			}
		}
	}
}

void 
updatepreviewc(Client *c,int i){
	if(!c) return;
	Imlib_Image image;
	imlib_context_set_drawable(c->win);
	// imlib_context_set_drawable(selmon->sel->win);
	image = imlib_create_image_from_drawable((Pixmap)0, 0, 0, c->w, c->h, 1);
	// image = imlib_create_image_from_drawable((Pixmap)0, 0, 0,selmon->sel->w, selmon->sel->h, 1);
	if (tagimages[i])
	{
		imlib_context_set_image(tagimages[0]);
		imlib_free_image();
	}
	if (image)
	{
		tagimages[i] = image;
	}
	else
	{
		tagimages[i] = NULL;
	}
}


void drawpreviewwin( Window win, int ww, int wh, int curtagindex)
{

	// int ww = 1800;
	// int wh = 600;
	Imlib_Image buffer;

	buffer = imlib_create_image(ww, wh);
	imlib_context_set_blend(1);
	imlib_context_set_image(buffer);	

	Imlib_Image image;
    // image = imlib_load_image("/home/beyond/black.jpeg");
	imlib_context_set_color(0,0,0,255);
	imlib_image_fill_rectangle(0, 0, ww, wh);
	// imlib_blend_image_onto_image(image, 0, 0, 0, ww, wh, 0, 0, ww, wh);
	// imlib_context_set_image(image);
	// imlib_free_image();
	// imlib_context_set_image(buffer);

	int i = 0;
	int row = 0;
	int col = 0;
	for(i = 0;i< LENGTH(tags); i++){
		// imlib_context_set_drawable(root);
		// image = imlib_create_image_from_drawable((Pixmap)0, 0, 0,selmon->ww,selmon->wh, 1);
		image = tagimages[i];
		// image = imlib_create_scaled_image_from_drawable((Pixmap)0, 0, 0, ww, wh, ww/3, wh/3, 1, 0);
		row = i/3;
		col = i%3;
		if(image){
			LOG_FORMAT("image loaded, tag:%d", i);
			
			imlib_context_set_image(image);
			int w = imlib_image_get_width();
			int h = imlib_image_get_height();
			imlib_context_set_image(buffer);
			imlib_blend_image_onto_image(image, 0, 0, 0, w, h, col*ww/3, row*wh/3, ww/3, wh/3);

			if(curtagindex == i){
				imlib_context_set_image(buffer);
				imlib_context_set_color(255, 200, 10, 100);
				imlib_image_fill_rectangle(col*ww/3, row*wh/3, ww/3, wh/3);
			}

			// imlib_context_set_image(image);
			// imlib_free_image();
		}else{
			if(curtagindex == i){
				imlib_context_set_image(buffer);
				imlib_context_set_color(255, 200, 10, 100);
				imlib_image_fill_rectangle(col*ww/3, row*wh/3, ww/3, wh/3);
			}
		}		
	}
	if(!win)
		win = XCreateSimpleWindow(dpy, DefaultRootWindow(dpy), 0, 0, ww, wh, 0, 0, 0);	
	// XMapWindow(dpy, win);

	imlib_context_set_drawable(win);
	imlib_context_set_blend(0);
	imlib_context_set_image(buffer);
	imlib_render_image_on_drawable_at_size(0, 0, ww, wh);
	imlib_free_image();


	// imlib_image_copy_rect(0,0, ww,wh, 0,0);
	// imlib_image_set_format("jpeg");
	// imlib_save_image("/home/beyond/screen.jpeg");
	// imlib_free_image();
	///  ####################### just for fun
}

void 
drawpreview(const Arg *arg){
	toggleswitchers(arg);
}

void setup(){
    Imlib_Updates updates, current_update;
	Display *disp;
	Visual *vis;
	Colormap cm;
	int depth;
	Imlib_Color_Range range;

	vis = DefaultVisual(dpy, DefaultScreen(dpy));
	depth = DefaultDepth(dpy, DefaultScreen(dpy));
	cm = DefaultColormap(dpy, DefaultScreen(dpy));

	imlib_set_cache_size(4096 * 1024);
	imlib_set_color_usage(128);
	/* dither for depths < 24bpp */
	imlib_context_set_dither(1);
	/* set the display , visual, colormap and drawable we are using */
	imlib_context_set_display(dpy);
	imlib_context_set_visual(vis);
	imlib_context_set_colormap(cm);
	imlib_context_set_drawable(selmon->switcher);

    memset(tagimages, 0, sizeof(tagimages));
}

	// updatepreview();
	// drawpreviewwin(selmon->switcher, selmon->ww/2, selmon->wh/2, getcurtagindex(selmon));

     -lImlib2